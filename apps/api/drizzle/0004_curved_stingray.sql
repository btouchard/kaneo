-- =================================================================
-- Adding "organization" better-auth plugin
-- workspace maps to organization, so we need to migrate to owners
-- and we any "pending" workspace_member is an invitation now
-- =================================================================

-- Part A: Migrate existing workspace owners from the `owner_id` column
-- into the `workspace_member` table with the role of "owner".
-- This uses an UPSERT to safely handle cases where the owner might already be a member.
INSERT INTO "workspace_member" (
  id,
  workspace_id,
  user_id,
  role,
  status,
  joined_at
)
SELECT
  gen_random_uuid()::text,
  w.id,
  w.owner_id,
  'owner',
  'active',
  NOW()
FROM
  "workspace" w
WHERE
  w.owner_id IS NOT NULL
ON CONFLICT (workspace_id, user_id) -- If a membership for this user/workspace already exists...
DO UPDATE SET
  role = 'owner'; -- ...just update their role to 'owner'.


-- Part B: Migrate existing "pending" members from the `workspace_member` table
-- into the new `invitation` table before the status column is dropped.
INSERT INTO "invitation" (
  id,
  workspace_id,
  email,
  role,
  status,
  expires_at,
  inviter_id
)
SELECT
  gen_random_uuid()::text,
  wm.workspace_id,
  u.email,
  wm.role,
  'pending',
  NOW() + INTERVAL '1 month', -- Set a default expiration for the new invitation
  -- Find the owner of the workspace to act as the inviter
  (SELECT user_id FROM workspace_member owner WHERE owner.workspace_id = wm.workspace_id AND owner.role = 'owner' LIMIT 1)
FROM
  "workspace_member" wm
JOIN
  "user" u ON wm.user_id = u.id
WHERE
  wm.status = 'pending';


-- =================================================================
-- Step 2: SCHEMA CHANGES (Generated by Drizzle, placed after data migration)
-- =================================================================

CREATE TABLE IF NOT EXISTS "invitation" (
	"id" text PRIMARY KEY NOT NULL,
	"workspace_id" text NOT NULL,
	"email" text NOT NULL,
	"role" text,
	"status" text DEFAULT 'pending' NOT NULL,
	"expires_at" timestamp NOT NULL,
	"inviter_id" text NOT NULL
);
--> statement-breakpoint
ALTER TABLE "session" ADD COLUMN "active_workspace_id" text;
--> statement-breakpoint
ALTER TABLE "workspace" ADD COLUMN "slug" text;
--> statement-breakpoint
ALTER TABLE "workspace" ADD COLUMN "logo" text;
--> statement-breakpoint
ALTER TABLE "workspace" ADD COLUMN "metadata" text;
--> statement-breakpoint
ALTER TABLE "workspace" DROP CONSTRAINT IF EXISTS "workspace_owner_id_user_id_fk";
--> statement-breakpoint
ALTER TABLE "workspace" DROP COLUMN IF EXISTS "owner_id";
--> statement-breakpoint
ALTER TABLE "workspace_member" DROP COLUMN IF EXISTS "status";
--> statement-breakpoint
ALTER TABLE "workspace" ADD CONSTRAINT "workspace_slug_unique" UNIQUE("slug");
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "invitation" ADD CONSTRAINT "invitation_workspace_id_workspace_id_fk" FOREIGN KEY ("workspace_id") REFERENCES "public"."workspace"("id") ON DELETE cascade ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;
--> statement-breakpoint
DO $$ BEGIN
 ALTER TABLE "invitation" ADD CONSTRAINT "invitation_inviter_id_user_id_fk" FOREIGN KEY ("inviter_id") REFERENCES "public"."user"("id") ON DELETE cascade ON UPDATE no action;
EXCEPTION
 WHEN duplicate_object THEN null;
END $$;

CREATE TABLE "invitation" (
	"id" text PRIMARY KEY NOT NULL,
	"workspace_id" text NOT NULL,
	"email" text NOT NULL,
	"role" text,
	"status" text DEFAULT 'pending' NOT NULL,
	"expires_at" timestamp NOT NULL,
	"inviter_id" text NOT NULL
);
--> statement-breakpoint
ALTER TABLE "workspace" DROP CONSTRAINT "workspace_owner_id_user_id_fk";
--> statement-breakpoint
ALTER TABLE "session" ADD COLUMN "active_workspace_id" text;--> statement-breakpoint
ALTER TABLE "workspace" ADD COLUMN "slug" text;--> statement-breakpoint
ALTER TABLE "workspace" ADD COLUMN "logo" text;--> statement-breakpoint
ALTER TABLE "workspace" ADD COLUMN "metadata" text;--> statement-breakpoint
ALTER TABLE "invitation" ADD CONSTRAINT "invitation_workspace_id_workspace_id_fk" FOREIGN KEY ("workspace_id") REFERENCES "public"."workspace"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "invitation" ADD CONSTRAINT "invitation_inviter_id_user_id_fk" FOREIGN KEY ("inviter_id") REFERENCES "public"."user"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "workspace" DROP COLUMN "owner_id";--> statement-breakpoint
ALTER TABLE "workspace_member" DROP COLUMN "status";--> statement-breakpoint
ALTER TABLE "workspace" ADD CONSTRAINT "workspace_slug_unique" UNIQUE("slug");
